// Used by the parent for dimensions e.g. parent-element:before is the sprite holder, parent-element is the parent
// Takes in a sprite map, name of section of sprite and multiplier for scaling purposes
@mixin spriter-holder($name, $multiplier: 1) {
  min-height: general-sprite-height($name) * $multiplier;
  min-width: general-sprite-width($name) * $multiplier;
}

// Sprites
// Note limits in Safari iOS: http://www.williammalone.com/articles/html5-javascript-ios-maximum-image-size/
$common-layout: smart;
$common-sprite-dimensions: true;
@import "sprites/common/*.png";

$common-retina-layout: smart;
$common-retina-sprite-dimensions: false;
@import "sprites/common-retina/*.png";


// Deals with retina and normal sprites
@mixin sprite-magic($sprite-name, $retina: true, $normal-sprite-map: $common-sprites, $retina-sprite-map: $common-retina-sprites){
  background-image: image-url(sprite-path($normal-sprite-map));
  background-position: sprite-position($normal-sprite-map, $sprite-name);
  width: image-width(sprite-file($normal-sprite-map, $sprite-name));
  height: image-height(sprite-file($normal-sprite-map, $sprite-name));
  background-repeat: no-repeat;

  @if $retina {
    @media only screen and (-webkit-min-device-pixel-ratio: 1.5), screen and (min-device-pixel-ratio: 1.5) {
      background-position: nth(sprite-position($retina-sprite-map, $sprite-name), 1) / 2 nth(sprite-position($retina-sprite-map, $sprite-name), 2) / 2;
      background-image: image-url(sprite-path($retina-sprite-map));
      background-size: image-width(sprite-path($retina-sprite-map)) / 2 image-height(sprite-path($retina-sprite-map)) / 2;
    }
  }
}

// If you want to position a background image in the centre of it's parent
@mixin sprite-background($sprite-name, $retina: true, $normal-sprite-map: $common-sprites, $retina-sprite-map: $common-retina-sprites) {
  @extend %background-holder;
  @include sprite-magic($sprite-name, $retina);
  top: 50%;
  left: 50%;
  margin-top: image-height(sprite-file($normal-sprite-map, $sprite-name)) * -0.5;
  margin-left: image-width(sprite-file($normal-sprite-map, $sprite-name)) * -0.5;
}

//Placeholder text syling is not yet supported by Compass
@mixin placeholder($color) { 

  &:-ms-input-placeholder { 
    color: $color; 
  }
  
  &:-moz-placeholder { //Firefox 18-
    color: $color; 
  }

  &::-moz-placeholder { //Firefox 19+
    color: $color; 
  }

  &::-webkit-input-placeholder {
    color: $color;
  }
}

// Used to make an arrow pointing down at the bottom of an element with a background colour and a border
// Assumes an element of .arrow
@mixin arrow ($color-background: #fff, $color-border: #000, $arrow-height: 28px, $arrow-border-width: 6px) {
  .arrow {
    position: absolute;
    bottom: 4px;
    z-index: 5;
    width: auto;
    left: 50%;
      
    &:after, &:before {
      @extend %background-holder;
      top: 100%;
      left: 50%;
      height: 0;
      width: 0;
      border: solid transparent;
    }

    &:after {
      border-top-color: $color-background;
      border-width: $arrow-height - $arrow-border-width;
      margin-left: ($arrow-height - $arrow-border-width) * -1;
    }

    &:before {
      border-top-color: $color-border;
      border-width: $arrow-height;
      margin-left: $arrow-height * -1;
    }
  } ///.arrow
}

@mixin breakpoint($class) {
    @if $class==xs {
        @media (max-width: 640px) {
            @content;
        }
    }
    @else if $class==sm {
        @media (min-width: 768px) {
            @content;
        }
    }
    @else if $class==md {
        @media (min-width: 992px) {
            @content;
        }
    }
    @else if $class==lg {
        @media (min-width: 1200px) {
            @content;
        }
    }
    @else {
        @warn "Breakpoint mixin supports: xs, sm, md, lg";
    }
}
